{"componentChunkName":"component---src-templates-post-js","path":"/blogs/003-message-queue-job-queue/","result":{"data":{"markdownRemark":{"html":"<h2 class=\"text-2xl font-bold mt-2 mb-4 lg:text-3xl dark:text-gray-100\">Message Queue</h2>\n<p class=\"text-md mt-2 mb-8 lg:text-lg dark:text-gray-200\">If you are a JavaScript developer, you may know that Promises were introduced back in 2015 as a part of ES6's (also known as ES2015) spec. Along with them came Job Queues. So, how are they different from the traditional event queue in JavaScript that handle regular callbacks?</p>\n<p class=\"text-md mt-2 mb-8 lg:text-lg dark:text-gray-200\">Event queues (also called Message queue or Macrotask queue) give JavaScript the super power of executing asynchronous code despite the language being single threaded. If you have ever used <code class=\"language-text\">setTimeout</code> or <code class=\"language-text\">setTimeinterval</code> in JavaScript, you might know what the below code would do:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p class=\"text-md mt-2 mb-8 lg:text-lg dark:text-gray-200\">If you are still unsure, do not worry. It does look a bit tricky if you are not fully aware of how event loop works in JavaScript. It will result in this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">c\nb\na\nd</code></pre></div>\n<h4 class=\"text-lg font-bold mt-2 mb-4 lg:text-xl dark:text-gray-100\">Explanation:</h4>\n<p class=\"text-md mt-2 mb-8 lg:text-lg dark:text-gray-200\">The callback functions that are passed inside the <code class=\"language-text\">setTimeout</code> functions are pushed into the message queue and they wait in the queue until the callstack is empty.</p>\n<p class=\"text-md mt-2 mb-8 lg:text-lg dark:text-gray-200\">They get executed in the order they are pushed into the queue (First In, First Out). This explains the order of the results we saw above.</p>\n<h2 class=\"text-2xl font-bold mt-2 mb-4 lg:text-3xl dark:text-gray-100\">Job Queue</h2>\n<p class=\"text-md mt-2 mb-8 lg:text-lg dark:text-gray-200\">Now, how does a job queue differ from the above illustrated behaviour?</p>\n<p class=\"text-md mt-2 mb-8 lg:text-lg dark:text-gray-200\">Let's consider the below code, which is a Promise.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">printer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">printer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"e\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p class=\"text-md mt-2 mb-8 lg:text-lg dark:text-gray-200\">Promises are also executed asynchronously. But the difference between them and <code class=\"language-text\">setTimeout</code> is that Promises are pushed into job queue (also called Microtask queue).</p>\n<p class=\"text-md mt-2 mb-8 lg:text-lg dark:text-gray-200\">In JavaScript, job queue has higher priority over message queue. So, if we combine code from both the examples:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">printer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">printer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"e\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p class=\"text-md mt-2 mb-8 lg:text-lg dark:text-gray-200\"><code class=\"language-text\">e</code> will be logged to the console before <code class=\"language-text\">b</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">c\ne\nb\na\nd</code></pre></div>\n<p class=\"text-md mt-2 mb-8 lg:text-lg dark:text-gray-200\">This is because items in the Job Queue are executed first before the ones in Message Queue. You may think of them as jumping the traditional queue.</p>\n<h2 class=\"text-2xl font-bold mt-2 mb-4 lg:text-3xl dark:text-gray-100\">TL;DR</h2>\n<ol>\n<li>Message queue is also called Macrotasks queue.</li>\n<li>Job queue is also called Microtasks queue.</li>\n<li>Job queue always takes the higher priority over Message queue.</li>\n<li>Promises go into Job queue.</li>\n</ol>","excerpt":"Message Queue If you are a JavaScript developer, you may know that Promises were introduced back in 2015 as a part of ES6's (also known as ES2015) spec. Along…","frontmatter":{"title":"Message Queue vs Job Queue in JavaScript with a simple example","date":"08 May 2022"},"timeToRead":2},"previous":{"fields":{"slug":"/blogs/002-got-my-first-star/"},"frontmatter":{"title":"Someone starred my GitHub repo"}},"next":null},"pageContext":{"id":"194fe50b-1caa-56e6-b3d5-43107ee46afe","previousPostId":"58a7910a-1760-58b2-8fbc-0c5c303c9353","nextPostId":null}},"staticQueryHashes":["3000541721"]}